document.addEventListener('DOMContentLoaded', function() {
    const apiKeyInput = document.getElementById('apiKey');
    const saveApiKeyBtn = document.getElementById('saveApiKey');
    const promptTextarea = document.getElementById('prompt');
    const optimizeBtn = document.getElementById('optimizeBtn');
    const resultDiv = document.getElementById('result');
    const loadingDiv = document.getElementById('loading');
    const errorDiv = document.getElementById('error');
    const vietnamesePre = document.getElementById('optimizedVietnamese');
    const englishPre = document.getElementById('optimizedEnglish');
    const tabBtns = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');
    const themeSwitch = document.getElementById('theme-switch');

    // Load theme preference from localStorage
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme === 'dark') {
        document.documentElement.setAttribute('data-theme', 'dark');
        themeSwitch.checked = true;
    }

    // Load API key from localStorage
    const savedApiKey = localStorage.getItem('geminiApiKey');
    if (savedApiKey) {
        apiKeyInput.value = savedApiKey;
    }

    // Theme toggle functionality
    themeSwitch.addEventListener('change', function() {
        if (this.checked) {
            document.documentElement.setAttribute('data-theme', 'dark');
            localStorage.setItem('theme', 'dark');
        } else {
            document.documentElement.removeAttribute('data-theme');
            localStorage.setItem('theme', 'light');
        }
    });

    // Save API key to localStorage
    saveApiKeyBtn.addEventListener('click', function() {
        const apiKey = apiKeyInput.value.trim();
        if (apiKey) {
            localStorage.setItem('geminiApiKey', apiKey);
            alert('API Key ƒë√£ ƒë∆∞·ª£c l∆∞u!');
        } else {
            alert('Vui l√≤ng nh·∫≠p API Key!');
        }
    });

    // Tab switching
    tabBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            tabBtns.forEach(b => b.classList.remove('active'));
            tabContents.forEach(c => c.classList.add('hidden'));
            this.classList.add('active');
            const tabId = this.getAttribute('data-tab') + '-tab';
            document.getElementById(tabId).classList.remove('hidden');
        });
    });

    // Copy functionality
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('copy-btn') || e.target.closest('.copy-btn')) {
            const copyBtn = e.target.classList.contains('copy-btn') ? e.target : e.target.closest('.copy-btn');
            const target = copyBtn.getAttribute('data-target');
            const textElement = document.getElementById('optimized' + target.charAt(0).toUpperCase() + target.slice(1));
            const textToCopy = textElement.textContent;

            copyToClipboard(textToCopy).then(() => {
                // Success feedback
                copyBtn.classList.add('copied');
                copyBtn.innerHTML = '<span class="copy-icon">‚úÖ</span> ƒê√£ sao ch√©p!';

                // Reset after 2 seconds
                setTimeout(() => {
                    copyBtn.classList.remove('copied');
                    copyBtn.innerHTML = '<span class="copy-icon">üìã</span> Sao ch√©p';
                }, 2000);
            }).catch(err => {
                console.error('Failed to copy: ', err);
                // Fallback for older browsers
                fallbackCopyTextToClipboard(textToCopy);
                copyBtn.classList.add('copied');
                copyBtn.innerHTML = '<span class="copy-icon">‚úÖ</span> ƒê√£ sao ch√©p!';

                setTimeout(() => {
                    copyBtn.classList.remove('copied');
                    copyBtn.innerHTML = '<span class="copy-icon">üìã</span> Sao ch√©p';
                }, 2000);
            });
        }
    });

    // Modern clipboard API
    async function copyToClipboard(text) {
        if (navigator.clipboard && window.isSecureContext) {
            return navigator.clipboard.writeText(text);
        } else {
            // Fallback for older browsers
            return fallbackCopyTextToClipboard(text);
        }
    }

    // Fallback method for older browsers
    function fallbackCopyTextToClipboard(text) {
        const textArea = document.createElement("textarea");
        textArea.value = text;
        textArea.style.position = "fixed";
        textArea.style.left = "-999999px";
        textArea.style.top = "-999999px";
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();

        return new Promise((resolve, reject) => {
            if (document.execCommand('copy')) {
                resolve();
            } else {
                reject(new Error('Fallback copy failed'));
            }
            document.body.removeChild(textArea);
        });
    }

    // Optimize prompt
    optimizeBtn.addEventListener('click', async function() {
        const apiKey = apiKeyInput.value.trim();
        const prompt = promptTextarea.value.trim();

        if (!apiKey) {
            showError('Vui l√≤ng nh·∫≠p v√† l∆∞u API Key tr∆∞·ªõc!');
            return;
        }

        if (!prompt) {
            showError('Vui l√≤ng nh·∫≠p prompt c·∫ßn t·ªëi ∆∞u h√≥a!');
            return;
        }

        showLoadingOverlay();
        hideError();
        hideResult();

        try {
            const optimizedPrompts = await optimizePrompt(apiKey, prompt);
            displayResult(optimizedPrompts);
        } catch (error) {
            showError('C√≥ l·ªói x·∫£y ra: ' + error.message);
        } finally {
            hideLoadingOverlay();
        }
    });

    async function optimizePrompt(apiKey, originalPrompt) {
        const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${apiKey}`;

        const instruction = `B·∫°n l√† chuy√™n gia Prompt Engineering c·∫•p cao v·ªõi h∆°n 10 nƒÉm kinh nghi·ªám. Nhi·ªám v·ª• c·ªßa b·∫°n l√† ph√¢n t√≠ch v√† t·ªëi ∆∞u h√≥a prompt m·ªôt c√°ch chuy√™n nghi·ªáp.

ƒê·∫ßu ti√™n, h√£y ph√¢n t√≠ch k·ªπ prompt g·ªëc theo c√°c ti√™u ch√≠ sau:
1. **Context**: C√≥ ƒë·ªß th√¥ng tin n·ªÅn kh√¥ng?
2. **Clarity**: C√≥ r√µ r√†ng, d·ªÖ hi·ªÉu kh√¥ng?
3. **Specificity**: C√≥ c·ª• th·ªÉ, chi ti·∫øt kh√¥ng?
4. **Actionability**: C√≥ h∆∞·ªõng d·∫´n r√µ r√†ng ƒë·ªÉ th·ª±c hi·ªán kh√¥ng?
5. **Completeness**: C√≥ ƒë·∫ßy ƒë·ªß c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt kh√¥ng?

Sau ƒë√≥, t·ªëi ∆∞u h√≥a prompt b·∫±ng c√°ch:
- B·ªï sung th√¥ng tin thi·∫øu
- L√†m r√µ c√°c ƒëi·ªÉm m∆° h·ªì
- C·∫£i thi·ªán c·∫•u tr√∫c v√† logic
- Th√™m c√°c k·ªπ thu·∫≠t prompt engineering ph√π h·ª£p (role, few-shot, COT n·∫øu c·∫ßn)
- ƒê·∫£m b·∫£o prompt hi·ªáu qu·∫£ v√† chuy√™n nghi·ªáp

Cu·ªëi c√πng, tr·∫£ v·ªÅ 2 phi√™n b·∫£n prompt t·ªëi ∆∞u:
- Phi√™n b·∫£n ti·∫øng Vi·ªát
- Phi√™n b·∫£n ti·∫øng Anh

Y√äU C·∫¶U QUAN TR·ªåNG: Ch·ªâ tr·∫£ v·ªÅ prompt t·ªëi ∆∞u cu·ªëi c√πng, KH√îNG gi·∫£i th√≠ch hay ph√¢n t√≠ch g√¨ th√™m.

Format ƒë·∫ßu ra ch√≠nh x√°c:
===TI·∫æNG VI·ªÜT===
[prompt t·ªëi ∆∞u b·∫±ng ti·∫øng Vi·ªát]

===TI·∫æNG ANH===
[prompt t·ªëi ∆∞u b·∫±ng ti·∫øng Anh]

Prompt g·ªëc c·∫ßn t·ªëi ∆∞u h√≥a: "${originalPrompt}"`;

        const requestBody = {
            contents: [{
                parts: [{
                    text: instruction
                }]
            }],
            generationConfig: {
                temperature: 0.3,
                topK: 40,
                topP: 0.95,
                maxOutputTokens: 8192,
            }
        };

        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody)
        });

        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));

            if (response.status === 400) {
                throw new Error('‚ùå API Key kh√¥ng h·ª£p l·ªá ho·∫∑c b·ªã thi·∫øu. Vui l√≤ng ki·ªÉm tra l·∫°i API key c·ªßa b·∫°n.');
            } else if (response.status === 403) {
                throw new Error('üö´ Quy·ªÅn truy c·∫≠p b·ªã t·ª´ ch·ªëi. API key c·ªßa b·∫°n c√≥ th·ªÉ kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng Gemini API.');
            } else if (response.status === 429) {
                throw new Error('‚è∞ Qu√° nhi·ªÅu y√™u c·∫ßu. B·∫°n ƒë√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n s·ª≠ d·ª•ng API. Vui l√≤ng th·ª≠ l·∫°i sau.');
            } else if (response.status === 500) {
                throw new Error('üîß L·ªói m√°y ch·ªß. D·ªãch v·ª• Gemini API ƒëang g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau.');
            } else if (response.status === 503) {
                throw new Error('‚ö†Ô∏è D·ªãch v·ª• kh√¥ng kh·∫£ d·ª•ng. Gemini API ƒëang b·∫£o tr√¨. Vui l√≤ng th·ª≠ l·∫°i sau.');
            } else {
                throw new Error(`üîå L·ªói k·∫øt n·ªëi: ${response.status} ${response.statusText}`);
            }
        }

        const data = await response.json();

        if (!data.candidates || !data.candidates[0]) {
            throw new Error('üìù Kh√¥ng th·ªÉ t·∫°o prompt. Vui l√≤ng th·ª≠ l·∫°i v·ªõi n·ªôi dung kh√°c.');
        }

        if (!data.candidates[0].content || !data.candidates[0].content.parts || !data.candidates[0].content.parts[0]) {
            throw new Error('üìù Kh√¥ng th·ªÉ t·∫°o prompt. AI kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£ h·ª£p l·ªá.');
        }

        // Check for blocked content
        if (data.candidates[0].finishReason === 'SAFETY') {
            throw new Error('üö´ N·ªôi dung b·ªã ch·∫∑n. Prompt c·ªßa b·∫°n c√≥ th·ªÉ vi ph·∫°m ch√≠nh s√°ch s·ª≠ d·ª•ng c·ªßa AI.');
        }

        // Check for other finish reasons
        if (data.candidates[0].finishReason === 'RECITATION') {
            throw new Error('üìö N·ªôi dung b·ªã l·∫∑p l·∫°i. Vui l√≤ng th·ª≠ v·ªõi prompt kh√°c.');
        }

        if (data.candidates[0].finishReason === 'LENGTH') {
            throw new Error('üìè N·ªôi dung qu√° d√†i. Vui l√≤ng th·ª≠ v·ªõi prompt ng·∫Øn h∆°n.');
        }

        const text = data.candidates[0].content.parts[0].text;

        // Parse the response to extract Vietnamese and English versions
        const vietnameseMatch = text.match(/===TI·∫æNG VI·ªÜT===\s*(.*?)(?====TI·∫æNG ANH===|$)/s);
        const englishMatch = text.match(/===TI·∫æNG ANH===\s*(.*?)$/s);

        return {
            vietnamese: vietnameseMatch ? vietnameseMatch[1].trim() : text,
            english: englishMatch ? englishMatch[1].trim() : text
        };
    }

    function displayResult(prompts) {
        vietnamesePre.textContent = prompts.vietnamese;
        englishPre.textContent = prompts.english;
        resultDiv.classList.remove('hidden');
    }

    function showLoading() {
        loadingDiv.classList.remove('hidden');
    }

    function hideLoading() {
        loadingDiv.classList.add('hidden');
    }

    function showLoadingOverlay() {
        document.getElementById('loading-overlay').classList.remove('hidden');
    }

    function hideLoadingOverlay() {
        document.getElementById('loading-overlay').classList.add('hidden');
    }

    function showError(message) {
        errorDiv.textContent = message;
        errorDiv.classList.remove('hidden');
    }

    function hideError() {
        errorDiv.classList.add('hidden');
    }

    function hideResult() {
        resultDiv.classList.add('hidden');
    }

    // History Management
    const historyList = document.getElementById('history-list');
    const historyCount = document.getElementById('history-count');
    const historySearch = document.getElementById('history-search');
    const clearHistoryBtn = document.getElementById('clear-history-btn');
    const saveToHistoryBtn = document.getElementById('saveToHistoryBtn');

    // Load history on page load
    loadHistory();

    // Save to history
    saveToHistoryBtn.addEventListener('click', function() {
        const vietnameseText = document.getElementById('optimizedVietnamese').textContent;
        const englishText = document.getElementById('optimizedEnglish').textContent;
        const originalPrompt = document.getElementById('prompt').value;

        if (!vietnameseText || !englishText) {
            alert('Kh√¥ng c√≥ k·∫øt qu·∫£ ƒë·ªÉ l∆∞u!');
            return;
        }

        const historyItem = {
            id: Date.now(),
            originalPrompt: originalPrompt,
            vietnameseResult: vietnameseText,
            englishResult: englishText,
            timestamp: new Date().toISOString(),
            title: generateTitle(vietnameseText) // Use optimized prompt for title
        };

        saveHistoryItem(historyItem);
        loadHistory();

        // Visual feedback
        saveToHistoryBtn.classList.add('saved');
        saveToHistoryBtn.innerHTML = '<span class="save-icon">‚úÖ</span> ƒê√£ l∆∞u!';
        setTimeout(() => {
            saveToHistoryBtn.classList.remove('saved');
            saveToHistoryBtn.innerHTML = '<span class="save-icon">üíæ</span> L∆∞u v√†o l·ªãch s·ª≠';
        }, 2000);
    });

    // Search history
    historySearch.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        filterHistory(searchTerm);
    });

    // Clear all history
    clearHistoryBtn.addEventListener('click', function() {
        if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t·∫•t c·∫£ l·ªãch s·ª≠?')) {
            localStorage.removeItem('promptHistory');
            loadHistory();
        }
    });

    // History functions
    function saveHistoryItem(item) {
        const history = getHistory();
        history.unshift(item); // Add to beginning

        // Limit to 50 items to prevent localStorage overflow
        if (history.length > 50) {
            history.splice(50);
        }

        localStorage.setItem('promptHistory', JSON.stringify(history));
    }

    function getHistory() {
        const history = localStorage.getItem('promptHistory');
        return history ? JSON.parse(history) : [];
    }

    function loadHistory() {
        const history = getHistory();
        historyList.innerHTML = '';

        if (history.length === 0) {
            historyList.innerHTML = `
                <div class="empty-history">
                    <div class="empty-icon">üìù</div>
                    <h3>Ch∆∞a c√≥ l·ªãch s·ª≠</h3>
                    <p>H√£y t·ªëi ∆∞u h√≥a prompt ƒë·∫ßu ti√™n c·ªßa b·∫°n!</p>
                </div>
            `;
            historyCount.textContent = '(0/50)';
            return;
        }

        historyCount.textContent = `(${history.length}/50)`;

        history.forEach(item => {
            const historyItem = createHistoryItem(item);
            historyList.appendChild(historyItem);
        });
    }

    function createHistoryItem(item) {
        const div = document.createElement('div');
        div.className = 'history-item';
        div.innerHTML = `
            <div class="history-item-header">
                <div class="title-container">
                    <h4 class="history-item-title" data-id="${item.id}">${item.title}</h4>
                    <button class="edit-title-btn" onclick="editTitle('${item.id}')" title="Ch·ªânh s·ª≠a ti√™u ƒë·ªÅ">
                        ‚úèÔ∏è
                    </button>
                </div>
                <span class="history-item-date">${formatDate(item.timestamp)}</span>
            </div>
            <div class="history-item-preview">${item.vietnameseResult.substring(0, 100)}${item.vietnameseResult.length > 100 ? '...' : ''}</div>
            <div class="history-item-actions">
                <button class="history-item-btn copy-btn" onclick="copyHistoryItem('${item.id}')">
                    üìã Sao ch√©p
                </button>
                <button class="history-item-btn delete-btn" onclick="deleteHistoryItem('${item.id}')">
                    üóëÔ∏è X√≥a
                </button>
            </div>
        `;
        return div;
    }

    function generateTitle(prompt) {
        // Generate a meaningful title from the prompt
        const words = prompt.split(' ').slice(0, 5).join(' ');
        return words.length > 30 ? words.substring(0, 30) + '...' : words;
    }

    function formatDate(dateString) {
        const date = new Date(dateString);
        const now = new Date();
        const diff = now - date;

        if (diff < 60000) return 'V·ª´a xong';
        if (diff < 3600000) return `${Math.floor(diff / 60000)} ph√∫t tr∆∞·ªõc`;
        if (diff < 86400000) return `${Math.floor(diff / 3600000)} gi·ªù tr∆∞·ªõc`;
        if (diff < 604800000) return `${Math.floor(diff / 86400000)} ng√†y tr∆∞·ªõc`;

        return date.toLocaleDateString('vi-VN');
    }

    function filterHistory(searchTerm) {
        const history = getHistory();
        const filtered = history.filter(item =>
            item.title.toLowerCase().includes(searchTerm) ||
            item.originalPrompt.toLowerCase().includes(searchTerm) ||
            item.vietnameseResult.toLowerCase().includes(searchTerm) ||
            item.englishResult.toLowerCase().includes(searchTerm)
        );

        historyList.innerHTML = '';

        if (filtered.length === 0) {
            historyList.innerHTML = `
                <div class="empty-history">
                    <div class="empty-icon">üîç</div>
                    <h3>Kh√¥ng t√¨m th·∫•y</h3>
                    <p>Th·ª≠ t√¨m v·ªõi t·ª´ kh√≥a kh√°c</p>
                </div>
            `;
            return;
        }

        filtered.forEach(item => {
            const historyItem = createHistoryItem(item);
            historyList.appendChild(historyItem);
        });
    }

    // Global functions for onclick handlers
    window.copyHistoryItem = async function(id) {
        const history = getHistory();
        const item = history.find(h => h.id == id);

        if (item) {
            const textToCopy = item.vietnameseResult; // Copy the optimized Vietnamese prompt

            try {
                // Try modern clipboard API first
                if (navigator.clipboard && window.isSecureContext) {
                    await navigator.clipboard.writeText(textToCopy);
                } else {
                    // Fallback to older method
                    await fallbackCopyTextToClipboard(textToCopy);
                }

                // Visual feedback
                const btn = event.target.closest('.copy-btn');
                if (btn) {
                    btn.innerHTML = '‚úÖ ƒê√£ sao ch√©p!';
                    btn.classList.add('copied');
                    setTimeout(() => {
                        btn.innerHTML = 'üìã Sao ch√©p';
                        btn.classList.remove('copied');
                    }, 2000);
                }
            } catch (err) {
                console.error('Failed to copy: ', err);
                // Try fallback method
                try {
                    await fallbackCopyTextToClipboard(textToCopy);
                    const btn = event.target.closest('.copy-btn');
                    if (btn) {
                        btn.innerHTML = '‚úÖ ƒê√£ sao ch√©p!';
                        btn.classList.add('copied');
                        setTimeout(() => {
                            btn.innerHTML = 'üìã Sao ch√©p';
                            btn.classList.remove('copied');
                        }, 2000);
                    }
                } catch (fallbackErr) {
                    console.error('Fallback copy also failed: ', fallbackErr);
                    // Last resort: show the text in a temporary textarea for manual copy
                    showManualCopyDialog(textToCopy);
                }
            }
        }
    };

    window.editTitle = function(id) {
        const titleElement = document.querySelector(`.history-item-title[data-id="${id}"]`);
        const editBtn = titleElement.nextElementSibling;

        if (!titleElement || !editBtn) return;

        const currentTitle = titleElement.textContent;
        const input = document.createElement('input');
        input.type = 'text';
        input.value = currentTitle;
        input.className = 'title-edit-input';
        input.maxLength = 50;

        // Replace title with input
        titleElement.parentNode.replaceChild(input, titleElement);

        // Change edit button to save button
        editBtn.innerHTML = '‚úÖ';
        editBtn.onclick = () => saveTitle(id, input);
        editBtn.title = 'L∆∞u ti√™u ƒë·ªÅ';

        // Focus and select all text
        input.focus();
        input.select();

        // Handle Enter key
        input.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                saveTitle(id, input);
            }
        });

        // Handle Escape key
        input.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                cancelEdit(id, currentTitle);
            }
        });
    };

    function saveTitle(id, input) {
        const newTitle = input.value.trim();
        if (!newTitle) {
            alert('Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!');
            input.focus();
            return;
        }

        // Update in localStorage
        const history = getHistory();
        const item = history.find(h => h.id == id);
        if (item) {
            item.title = newTitle;
            localStorage.setItem('promptHistory', JSON.stringify(history));
        }

        // Update UI
        const titleElement = document.createElement('h4');
        titleElement.className = 'history-item-title';
        titleElement.setAttribute('data-id', id);
        titleElement.textContent = newTitle;

        input.parentNode.replaceChild(titleElement, input);

        // Reset edit button
        const editBtn = titleElement.nextElementSibling;
        if (editBtn) {
            editBtn.innerHTML = '‚úèÔ∏è';
            editBtn.onclick = () => editTitle(id);
            editBtn.title = 'Ch·ªânh s·ª≠a ti√™u ƒë·ªÅ';
        }
    }

    function cancelEdit(id, originalTitle) {
        const input = document.querySelector(`.title-edit-input`);
        if (!input) return;

        const titleElement = document.createElement('h4');
        titleElement.className = 'history-item-title';
        titleElement.setAttribute('data-id', id);
        titleElement.textContent = originalTitle;

        input.parentNode.replaceChild(titleElement, input);

        // Reset edit button
        const editBtn = titleElement.nextElementSibling;
        if (editBtn) {
            editBtn.innerHTML = '‚úèÔ∏è';
            editBtn.onclick = () => editTitle(id);
            editBtn.title = 'Ch·ªânh s·ª≠a ti√™u ƒë·ªÅ';
        }
    }

    window.deleteHistoryItem = function(id) {
        if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a item n√†y?')) {
            const history = getHistory();
            const filtered = history.filter(h => h.id != id);
            localStorage.setItem('promptHistory', JSON.stringify(filtered));
            loadHistory();
        }
    };

    // Export to TXT file
    window.exportToTxt = function(language) {
        const elementId = language === 'vietnamese' ? 'optimizedVietnamese' : 'optimizedEnglish';
        const textElement = document.getElementById(elementId);

        if (!textElement || !textElement.textContent.trim()) {
            alert('Kh√¥ng c√≥ n·ªôi dung ƒë·ªÉ xu·∫•t!');
            return;
        }

        const content = textElement.textContent.trim();
        const languageName = language === 'vietnamese' ? 'Tieng-Viet' : 'English';
        const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
        const filename = `prompt-toi-uu-${languageName}-${timestamp}.txt`;

        // Create header for the file
        const header = `=====================================
PROMPT T·ªêI ∆ØU H√ìA - ${languageName.toUpperCase()}
Xu·∫•t ng√†y: ${new Date().toLocaleString('vi-VN')}
C√¥ng c·ª•: AI Prompt Optimizer

`;

        const fullContent = header + content;

        // Create and download the file
        try {
            const blob = new Blob([fullContent], { type: 'text/plain;charset=utf-8' });
            const url = URL.createObjectURL(blob);

            const link = document.createElement('a');
            link.href = url;
            link.download = filename;
            link.style.display = 'none';

            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);

            URL.revokeObjectURL(url);

            // Visual feedback
            const btn = event.target.closest('.export-btn');
            if (btn) {
                btn.innerHTML = '‚úÖ ƒê√£ xu·∫•t!';
                btn.classList.add('exported');
                setTimeout(() => {
                    btn.innerHTML = '<span class="export-icon">üìÑ</span> Xu·∫•t TXT';
                    btn.classList.remove('exported');
                }, 2000);
            }
        } catch (error) {
            console.error('Export failed:', error);
            alert('Kh√¥ng th·ªÉ xu·∫•t file. Vui l√≤ng th·ª≠ l·∫°i.');
        }
    };

    // Manual copy dialog for when clipboard API fails
    function showManualCopyDialog(text) {
        // Create modal dialog
        const modal = document.createElement('div');
        modal.className = 'manual-copy-modal';
        modal.innerHTML = `
            <div class="manual-copy-content">
                <h3>üìã Sao ch√©p th·ªß c√¥ng</h3>
                <p>Vui l√≤ng ch·ªçn to√†n b·ªô vƒÉn b·∫£n b√™n d∆∞·ªõi v√† nh·∫•n <strong>Ctrl+C</strong> ƒë·ªÉ sao ch√©p:</p>
                <textarea class="manual-copy-textarea" readonly>${text}</textarea>
                <div class="manual-copy-actions">
                    <button class="manual-copy-btn" onclick="this.closest('.manual-copy-modal').remove()">ƒê√≥ng</button>
                </div>
            </div>
        `;

        // Add to body
        document.body.appendChild(modal);

        // Focus and select the textarea
        const textarea = modal.querySelector('.manual-copy-textarea');
        textarea.focus();
        textarea.select();

        // Close on click outside
        modal.addEventListener('click', function(e) {
            if (e.target === modal) {
                modal.remove();
            }
        });
    }
});
